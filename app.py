import streamlit as st
import pandas as pd
from PIL import Image
from datetime import datetime
import time
import json
import os
import requests
from requests import RequestException
from io import BytesIO

from receipt_processor_old import ReceiptProcessor
from category_classifier_old import CategoryClassifier
from data_manager import DataManager
from analytics import Analytics
from config import EXPENSE_CATEGORIES, CATEGORY_ICONS

# Page config
st.set_page_config(
    page_title="ReceiptsScanner",
    page_icon="üßæ",
    layout="wide"
)

# API endpoint (leave empty to use local processing fallback)
API_URL = os.getenv("API_URL", "").rstrip("/")

# Initialize components - FIXED
@st.cache_resource
def get_components():
    data_manager = DataManager()
    return (
        ReceiptProcessor(),
        CategoryClassifier(),
        data_manager,
        Analytics(data_manager)  # Pass the same instance
    )

processor, classifier, data_manager, analytics = get_components()

# Helper functions - ENHANCED
def validate_form_data(store_name, total_amount, date_str):
    """Validate form data with specific error messages"""
    errors = []
    
    if not store_name or not store_name.strip() or len(store_name.strip()) < 2:
        errors.append("T√™n c·ª≠a h√†ng ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±")
    
    if total_amount <= 0 or total_amount > 100000000:
        errors.append("S·ªë ti·ªÅn ph·∫£i t·ª´ 0 ƒë·∫øn 100 tri·ªáu VNƒê")
    
    if not date_str or not date_str.strip():
        errors.append("Ng√†y kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    else:
        try:
            datetime.strptime(date_str, "%d/%m/%Y")
        except ValueError:
            errors.append("ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá (dd/mm/yyyy)")
    
    return errors

def save_receipt_data(receipt_data, form_data):
    """Save receipt with metadata - ENHANCED"""
    try:
        enhanced_data = {
            **receipt_data,
            **form_data,
            'processed_date': datetime.now().isoformat(),
            'id': f"receipt_{int(time.time() * 1000)}"
        }
        return data_manager.add_receipt(enhanced_data)
    except Exception as e:
        print(f"Error saving receipt data: {e}")
        return False

def format_currency(amount):
    """Format currency consistently"""
    try:
        return f"{float(amount):,.0f} VNƒê"
    except (ValueError, TypeError):
        return "0 VNƒê"

def get_confidence_indicator(confidence):
    """Get confidence indicator with color"""
    try:
        confidence = float(confidence)
        if confidence >= 80: return "üü¢", "R·∫•t t·ªët"
        elif confidence >= 60: return "üü°", "T·ªët"
        elif confidence >= 40: return "üü†", "Trung b√¨nh"
        else: return "üî¥", "C·∫ßn ki·ªÉm tra"
    except (ValueError, TypeError):
        return "üî¥", "C·∫ßn ki·ªÉm tra"

# Sidebar
st.sidebar.title("üßæ ReceiptsScanner")
page = st.sidebar.selectbox("üìã Ch·ªçn ch·ª©c nƒÉng", [
    "Qu√©t h√≥a ƒë∆°n", "Xem h√≥a ƒë∆°n", "Ph√¢n t√≠ch", "C√†i ƒë·∫∑t"
])

# Quick stats - ENHANCED
try:
    receipts = data_manager.get_receipts()
    receipts_count = len(receipts)

    if receipts_count > 0:
        total_spending = sum(float(r.get('total_amount', 0)) for r in receipts)
        st.sidebar.markdown("---")
        st.sidebar.markdown("üìä **Th·ªëng k√™ nhanh**")
        st.sidebar.write(f"üìÑ H√≥a ƒë∆°n: {receipts_count}")
        st.sidebar.write(f"üí∞ T·ªïng: {format_currency(total_spending)}")
except Exception as e:
    st.sidebar.error("L·ªói t·∫£i d·ªØ li·ªáu")
    receipts = []
    receipts_count = 0

# === SCAN PAGE ===
if page == "Qu√©t h√≥a ƒë∆°n":
    st.title("üì± Qu√©t h√≥a ƒë∆°n m·ªõi")

    # Upload ·∫£nh
    uploaded_file = st.file_uploader(
        "üì∏ Ch·ªçn ·∫£nh h√≥a ƒë∆°n", 
        type=['png', 'jpg', 'jpeg'],
        help="Ch·ªçn ·∫£nh r√µ n√©t, √°nh s√°ng t·ªët ƒë·ªÉ k·∫øt qu·∫£ OCR ch√≠nh x√°c h∆°n."
    )

    # Option: Force local processing even if API_URL configured
    use_local = st.checkbox("‚öôÔ∏è X·ª≠ l√Ω c·ª•c b·ªô (kh√¥ng g·ªçi API)", value=False)

    # X·ª≠ l√Ω qu√©t khi b·∫•m n√∫t
    if uploaded_file and st.button("üîç Qu√©t ngay", type="primary", use_container_width=True):
        with st.spinner("üîÑ ƒêang x·ª≠ l√Ω..."):
            # If API is configured and user didn't choose local, upload to API
            if API_URL and not use_local:
                try:
                    files = {
                        "file": (
                            uploaded_file.name or f"upload_{int(time.time())}.jpg",
                            uploaded_file.getvalue(),
                            getattr(uploaded_file, "type", "application/octet-stream")
                        )
                    }
                    resp = requests.post(f"{API_URL}/upload", files=files, timeout=30)
                    resp.raise_for_status()
                    data = resp.json()
                    job_id = data.get("job_id")
                    if not job_id:
                        st.error("API tr·∫£ v·ªÅ kh√¥ng c√≥ job_id")
                    else:
                        st.session_state["job_id"] = job_id
                        st.success(f"ƒê√£ t·∫°o job: {job_id}. Vui l√≤ng ki·ªÉm tra tr·∫°ng th√°i.")
                except RequestException as e:
                    st.error(f"L·ªói khi upload l√™n API: {e}")
                    # Fallback to local processing automatically
                    st.info("Chuy·ªÉn sang x·ª≠ l√Ω c·ª•c b·ªô...")
                    try:
                        receipt_data = processor.process_receipt(Image.open(uploaded_file))
                        if receipt_data.get("confidence", 0) == 0:
                            st.error("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung t·ª´ ·∫£nh (c·ª•c b·ªô)!")
                        else:
                            receipt_data["category"] = classifier.predict_category(receipt_data)
                            st.session_state["receipt_data"] = receipt_data
                            st.success("ƒê√£ x·ª≠ l√Ω c·ª•c b·ªô th√†nh c√¥ng")
                    except Exception as e2:
                        st.error(f"L·ªói x·ª≠ l√Ω c·ª•c b·ªô: {e2}")
            else:
                # Local processing fallback / explicit
                try:
                    receipt_data = processor.process_receipt(Image.open(uploaded_file))
                    if receipt_data.get("confidence", 0) == 0:
                        st.error("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung t·ª´ ·∫£nh!")
                    else:
                        receipt_data["category"] = classifier.predict_category(receipt_data)
                        st.session_state["receipt_data"] = receipt_data
                        st.success("ƒê√£ x·ª≠ l√Ω c·ª•c b·ªô th√†nh c√¥ng")
                except Exception as e:
                    st.error(f"L·ªói x·ª≠ l√Ω ·∫£nh (c·ª•c b·ªô): {e}")

    # If job_id present, allow checking status
    job_id = st.session_state.get("job_id")
    if job_id:
        st.markdown("### üü° Job ƒë√£ ƒë∆∞·ª£c t·∫°o (API x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô)")
        st.write(f"Job ID: `{job_id}`")
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("üîÅ Ki·ªÉm tra tr·∫°ng th√°i", key=f"check_{job_id}"):
                if not API_URL:
                    st.error("API_URL ch∆∞a c·∫•u h√¨nh, kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i")
                else:
                    try:
                        resp = requests.get(f"{API_URL}/status/{job_id}", timeout=10)
                        resp.raise_for_status()
                        job = resp.json()
                        st.write(job)
                        status = job.get("status")
                        if status == "done":
                            result = job.get("result", {})
                            if result:
                                # Map result into expected receipt_data shape if necessary
                                # Prefer result as-is (result should contain parsed entities)
                                receipt_data = result
                                # ensure category exists
                                if not receipt_data.get("category"):
                                    try:
                                        receipt_data["category"] = classifier.predict_category(receipt_data)
                                    except Exception:
                                        receipt_data["category"] = list(EXPENSE_CATEGORIES.keys())[0] if EXPENSE_CATEGORIES else "Kh√°c"
                                st.session_state["receipt_data"] = receipt_data
                                st.success("‚úÖ Job ho√†n th√†nh ‚Äî d·ªØ li·ªáu ƒë√£ s·∫µn s√†ng ƒë·ªÉ l∆∞u")
                                # clear job_id after success to avoid duplicate checks
                                del st.session_state["job_id"]
                        elif status == "failed":
                            st.error(f"Job th·∫•t b·∫°i: {job.get('error')}")
                            del st.session_state["job_id"]
                        else:
                            st.info(f"Tr·∫°ng th√°i hi·ªán t·∫°i: {status}")
                    except RequestException as e:
                        st.error(f"L·ªói khi g·ªçi API: {e}")

        with col2:
            if st.button("üóëÔ∏è H·ªßy job", key=f"cancel_{job_id}"):
                # We don't have cancel endpoint; just drop local reference
                del st.session_state["job_id"]
                st.info("ƒê√£ h·ªßy tham chi·∫øu job c·ª•c b·ªô (API c√≥ th·ªÉ v·∫´n x·ª≠ l√Ω).")

    # ‚úÖ L·∫•y l·∫°i d·ªØ li·ªáu sau khi qu√©t t·ª´ session
    receipt_data = st.session_state.get("receipt_data", {})

    # N·∫øu ƒë√£ c√≥ d·ªØ li·ªáu th√¨ hi·ªÉn th·ªã preview & form l∆∞u
    if receipt_data:
        # Hi·ªÉn th·ªã th√¥ng tin qu√©t
        st.success(f"üìÑ ƒê√£ qu√©t: {receipt_data.get('store_name', 'Kh√¥ng r√µ')} - {format_currency(receipt_data.get('total_amount', 0))}")

        # Form x√°c nh·∫≠n v√† l∆∞u
        with st.form("receipt_form"):
            st.subheader("‚úèÔ∏è X√°c nh·∫≠n v√† ch·ªânh s·ª≠a")

            col1, col2 = st.columns(2)
            with col1:
                store_name = st.text_input("üè™ T√™n c·ª≠a h√†ng", value=receipt_data.get("store_name", ""))
                total_amount = st.number_input("üí∞ S·ªë ti·ªÅn", value=float(receipt_data.get("total_amount", 0)), step=1000.0)
            with col2:
                date_input = st.text_input("üìÖ Ng√†y mua", value=receipt_data.get("date", ""))
                category = st.selectbox("üìÇ Danh m·ª•c", list(EXPENSE_CATEGORIES.keys()), index=0)

            notes = st.text_area("üìù Ghi ch√∫", placeholder="V√≠ d·ª•: Thanh to√°n ti·ªÅn ƒÉn tr∆∞a...")

            submit = st.form_submit_button("üíæ L∆∞u h√≥a ƒë∆°n")
            if submit:
                form_data = {
                    "store_name": store_name.strip(),
                    "total_amount": total_amount,
                    "date": date_input.strip(),
                    "category": category,
                    "notes": notes.strip(),
                    "confidence": receipt_data.get("confidence", 0),
                    "phone": receipt_data.get("phone", ""),
                    "address": receipt_data.get("address", ""),
                    "items": receipt_data.get("items", []),
                }

                with st.spinner("ƒêang l∆∞u..."):
                    if save_receipt_data(receipt_data, form_data):
                        st.success("‚úÖ ƒê√£ l∆∞u h√≥a ƒë∆°n th√†nh c√¥ng!")
                        st.balloons()

                        # X√≥a session ƒë·ªÉ tr√°nh l∆∞u tr√πng
                        del st.session_state["receipt_data"]
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error("‚ùå C√≥ l·ªói khi l∆∞u d·ªØ li·ªáu!")

# === VIEW PAGE === (ENHANCED)
elif page == "Xem h√≥a ƒë∆°n":
    st.title("üìã Danh s√°ch h√≥a ƒë∆°n")
    
    if not receipts:
        st.info("üìù **Ch∆∞a c√≥ h√≥a ƒë∆°n n√†o!**")
        st.info("üí° H√£y qu√©t h√≥a ƒë∆°n ƒë·∫ßu ti√™n c·ªßa b·∫°n ·ªü trang 'Qu√©t h√≥a ƒë∆°n'")
    else:
        # Filters
        st.markdown("### üîç **B·ªô l·ªçc**")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            search = st.text_input("üîç T√¨m ki·∫øm", placeholder="T√™n c·ª≠a h√†ng...")
        with col2:
            filter_category = st.selectbox("üìÇ Dan m·ª•c", ["T·∫•t c·∫£"] + list(EXPENSE_CATEGORIES.keys()))
        with col3:
            sort_by = st.selectbox("üìä S·∫Øp x·∫øp", ["M·ªõi nh·∫•t", "C≈© nh·∫•t", "S·ªë ti·ªÅn cao", "S·ªë ti·ªÅn th·∫•p"])
        
        # Filter logic
        filtered = receipts.copy()
        
        if search:
            filtered = [r for r in filtered if 
                       search.lower() in r.get('store_name', '').lower() or
                       search.lower() in r.get('notes', '').lower()]
        
        if filter_category != "T·∫•t c·∫£":
            filtered = [r for r in filtered if r.get('category') == filter_category]
        
        # Sort logic
        sort_keys = {
            "M·ªõi nh·∫•t": lambda x: x.get('processed_date', ''),
            "C≈© nh·∫•t": lambda x: x.get('processed_date', ''),
            "S·ªë ti·ªÅn cao": lambda x: float(x.get('total_amount', 0)),
            "S·ªë ti·ªÅn th·∫•p": lambda x: float(x.get('total_amount', 0))
        }
        
        filtered.sort(key=sort_keys[sort_by], reverse=sort_by in ["M·ªõi nh·∫•t", "S·ªë ti·ªÅn cao"])
        
        # Display results
        st.markdown(f"### üìÑ **K·∫øt qu·∫£: {len(filtered)} h√≥a ƒë∆°n**")
        
        if filtered:
            total_filtered = sum(float(r.get('total_amount', 0)) for r in filtered)
            col1, col2, col3 = st.columns(3)
            col1.metric("üí∞ T·ªïng", format_currency(total_filtered))
            col2.metric("üìä TB", format_currency(total_filtered / len(filtered)) if len(filtered) > 0 else format_currency(0))
            col3.metric("üìÑ S·ªë l∆∞·ª£ng", len(filtered))
            
            # Display receipts
            for i, receipt in enumerate(filtered):
                confidence_icon, _ = get_confidence_indicator(receipt.get('confidence', 0))
                
                with st.expander(
                    f"{confidence_icon} üè™ **{receipt.get('store_name', 'Unknown')}** - "
                    f"**{format_currency(receipt.get('total_amount', 0))}** "
                    f"({receipt.get('date', 'N/A')})"
                ):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        info_items = [
                            f"üìÇ **Danh m·ª•c:** {receipt.get('category', 'N/A')}",
                            f"üìÖ **Ng√†y:** {receipt.get('date', 'N/A')}",
                            f"üéØ **ƒê·ªô tin c·∫≠y:** {receipt.get('confidence', 0)}%"
                        ]
                        
                        if receipt.get('phone'):
                            info_items.append(f"üìû **SƒêT:** {receipt.get('phone')}")
                        if receipt.get('notes'):
                            info_items.append(f"üìù **Ghi ch√∫:** {receipt.get('notes')}")
                        
                        for item in info_items:
                            st.markdown(item)
                        
                        # Show items preview
                        if receipt.get('items'):
                            st.markdown(f"#### üõçÔ∏è S·∫£n ph·∫©m ({len(receipt['items'])})")

                            for item in receipt['items'][:3]:
                                # Ki·ªÉm tra n·∫øu l√† dict th√¨ l·∫•y name + price
                                if isinstance(item, dict):
                                    name = item.get('name', 'Unknown')
                                    price = item.get('price', 0)
                                else:
                                    name = str(item)
                                    price = 0
                                st.write(f"‚Ä¢ {name}: {format_currency(price)}")

                            if len(receipt['items']) > 3:
                                st.write(f"... v√† {len(receipt['items'])-3} s·∫£n ph·∫©m kh√°c")

                    with col2:
                        if st.button("üóëÔ∏è X√≥a", key=f"del_{i}"):
                            if data_manager.delete_receipt(receipt.get('id')):
                                st.success("‚úÖ ƒê√£ x√≥a!")
                                st.rerun()

# === ANALYTICS PAGE === (ENHANCED)
elif page == "Ph√¢n t√≠ch":
    st.title("üìä Ph√¢n t√≠ch chi ti√™u")
    
    if not receipts:
        st.info("üìä **Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch!**")
    else:
        try:
            insights = analytics.get_spending_insights()
            
            # Metrics
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("üí∞ T·ªïng chi ti√™u", format_currency(insights.get('total_spending', 0)))
            col2.metric("üìä TB/h√≥a ƒë∆°n", format_currency(insights.get('avg_spending', 0)))
            col3.metric("üìÑ T·ªïng Hƒê", insights.get('total_receipts', 0))
            col4.metric("üéØ Tin c·∫≠y TB", f"{insights.get('avg_confidence', 0):.0f}%")
            
            # Charts
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### ü•ß **Chi ti√™u theo danh m·ª•c**")
                try:
                    chart = analytics.create_category_pie_chart()
                    st.plotly_chart(chart, use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói t·∫°o bi·ªÉu ƒë·ªì: {e}")
            
            with col2:
                st.markdown("#### üìÖ **Xu h∆∞·ªõng theo th√°ng**")
                try:
                    chart = analytics.create_monthly_comparison()
                    st.plotly_chart(chart, use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói t·∫°o bi·ªÉu ƒë·ªì: {e}")
        
        except Exception as e:
            st.error(f"L·ªói ph√¢n t√≠ch d·ªØ li·ªáu: {e}")

# === SETTINGS PAGE === (ENHANCED)
elif page == "C√†i ƒë·∫∑t":
    st.title("‚öôÔ∏è C√†i ƒë·∫∑t")
    
    # Statistics
    try:
        col1, col2, col3 = st.columns(3)
        total_amount = sum(float(r.get('total_amount', 0)) for r in receipts)
        avg_confidence = sum(float(r.get('confidence', 0)) for r in receipts) / len(receipts) if receipts else 0
        
        col1.metric("üìÑ H√≥a ƒë∆°n", len(receipts))
        col2.metric("üí∞ T·ªïng", format_currency(total_amount))
        col3.metric("üéØ Tin c·∫≠y TB", f"{avg_confidence:.1f}%")
    except Exception as e:
        st.error(f"L·ªói t·∫£i th·ªëng k√™: {e}")
    
    # Data export
    st.markdown("### üì• **Xu·∫•t d·ªØ li·ªáu**")
    if receipts:
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìÑ T·∫£i CSV", type="primary"):
                try:
                    df = data_manager.get_receipts_df()
                    if not df.empty:
                        csv = df.to_csv(index=False)
                        st.download_button(
                            "‚¨áÔ∏è T·∫£i ngay",
                            csv,
                            f"receipts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            "text/csv"
                        )
                    else:
                        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t")
                except Exception as e:
                    st.error(f"‚ùå L·ªói: {str(e)}")
    
    # Data management
    st.markdown("### üóÉÔ∏è **Qu·∫£n l√Ω d·ªØ li·ªáu**")
    with st.expander("‚ö†Ô∏è **X√≥a d·ªØ li·ªáu**"):
        st.warning("‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!")
        if st.button("üóëÔ∏è X√≥a t·∫•t c·∫£", type="secondary"):
            if st.button("‚ö†Ô∏è X√ÅC NH·∫¨N", type="primary"):
                if data_manager.clear_all_data():
                    st.success("‚úÖ ƒê√£ x√≥a!")
                    st.rerun()
                else:
                    st.error("‚ùå C√≥ l·ªói khi x√≥a d·ªØ li·ªáu!")

# Sidebar footer
st.sidebar.markdown("---")
st.sidebar.markdown("üì± **ReceiptsScanner v2.0**")

# Performance indicator
try:
    if receipts_count > 50:
        st.sidebar.success(f"üéâ Power User!")
    elif receipts_count > 10:
        st.sidebar.info(f"üìà ƒêang ph√°t tri·ªÉn!")
    elif receipts_count > 0:
        st.sidebar.info(f"üå± B·∫Øt ƒë·∫ßu t·ªët!")
except:
    pass
