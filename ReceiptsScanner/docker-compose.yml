version: '3.8'

services:
  # Redis - Message Broker & Cache
  redis:
    image: redis:7-alpine
    container_name: receipts_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: receipts_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # FastAPI - API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: receipts_api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./training_data:/app/training_data
    environment:
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - STORAGE_BACKEND=s3
      - API_HOST=0.0.0.0
      - API_PORT=8000
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker - Background Task Processor
  worker:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: receipts_worker
    ports:
      - "8002:8002"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./training_data:/app/training_data
    environment:
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - STORAGE_BACKEND=s3
      - PROMETHEUS_PORT=8002
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A workers.celery_app worker --loglevel=info --concurrency=4

  # Streamlit UI - Frontend
  ui:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: receipts_ui
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    environment:
      - API_URL=http://api:8000
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - STORAGE_BACKEND=s3
    env_file:
      - .env
    depends_on:
      - api
      - worker
    restart: unless-stopped
    command: streamlit run app.py --server.port=8501 --server.address=0.0.0.0

  # Flower - Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: receipts_flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A workers.celery_app flower --port=5555

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: receipts_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped

  # Grafana - Visualization Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: receipts_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: receipts_network
    driver: bridge