name: Receipt Scanner CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Run smoke tests
      env:
        REDIS_URL: redis://localhost:6379/0
        STORAGE_BACKEND: json
        DATA_DIR: ./test_data
        MODELS_DIR: ./test_models
      run: |
        pytest tests/test_smoke.py -v
    
    - name: Run processor tests
      env:
        REDIS_URL: redis://localhost:6379/0
        STORAGE_BACKEND: json
      run: |
        pytest tests/test_processor.py -v
    
    - name: Run classifier tests
      env:
        REDIS_URL: redis://localhost:6379/0
        STORAGE_BACKEND: json
        DATA_DIR: ./test_data
        MODELS_DIR: ./test_models
      run: |
        pytest tests/test_classifier.py -v
    
    - name: Test coverage
      env:
        REDIS_URL: redis://localhost:6379/0
        STORAGE_BACKEND: json
        DATA_DIR: ./test_data
        MODELS_DIR: ./test_models
      run: |
        pip install pytest-cov
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build UI Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: receipts-scanner-ui:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build API Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.api
        push: false
        tags: receipts-scanner-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max