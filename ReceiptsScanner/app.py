"""
Streamlit UI - Main entry point for Receipt Scanner application
"""
import streamlit as st
import requests
from PIL import Image
import io
import os
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from typing import List, Dict, Any
import time

# Configuration
API_URL = os.getenv("API_URL", "http://localhost:8000")

st.set_page_config(
    page_title="Receipt Scanner",
    page_icon="üßæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .stButton>button {
        width: 100%;
    }
    .success-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .error-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
</style>
""", unsafe_allow_html=True)


def check_api_health():
    """Check if API is accessible"""
    try:
        response = requests.get(f"{API_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False


def upload_receipt(files: List[Any]) -> Dict:
    """Upload receipt images to API"""
    file_data = []
    for file in files:
        file_data.append(("files", (file.name, file.getvalue(), file.type)))
    
    response = requests.post(f"{API_URL}/upload", files=file_data)
    return response.json()


def get_receipts(limit: int = 100, skip: int = 0) -> List[Dict]:
    """Fetch receipts from API"""
    response = requests.get(f"{API_URL}/receipts?limit={limit}&skip={skip}")
    return response.json()


def get_receipt(receipt_id: str) -> Dict:
    """Get single receipt by ID"""
    response = requests.get(f"{API_URL}/receipts/{receipt_id}")
    return response.json()


def update_receipt(receipt_id: str, data: Dict) -> Dict:
    """Update receipt data"""
    response = requests.put(f"{API_URL}/receipts/{receipt_id}", json=data)
    return response.json()


def delete_receipt(receipt_id: str) -> bool:
    """Delete receipt"""
    response = requests.delete(f"{API_URL}/receipts/{receipt_id}")
    return response.status_code == 200


def get_job_status(job_id: str) -> Dict:
    """Get job processing status"""
    response = requests.get(f"{API_URL}/jobs/{job_id}")
    return response.json()


def page_scan_receipts():
    """Page 1: Scan and upload receipts"""
    st.title("üì∏ Qu√©t H√≥a ƒê∆°n")
    
    # Check API connection
    if not check_api_health():
        st.error("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API server. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return
    
    st.write("T·∫£i l√™n h√¨nh ·∫£nh h√≥a ƒë∆°n ƒë·ªÉ t·ª± ƒë·ªông tr√≠ch xu·∫•t th√¥ng tin.")
    
    # File uploader
    uploaded_files = st.file_uploader(
        "Ch·ªçn file h√¨nh ·∫£nh",
        type=["jpg", "jpeg", "png", "pdf"],
        accept_multiple_files=True,
        help="H·ªó tr·ª£ JPG, PNG, PDF (t·ªëi ƒëa 10 files)"
    )
    
    if uploaded_files:
        st.write(f"**ƒê√£ ch·ªçn {len(uploaded_files)} file**")
        
        # Preview images
        cols = st.columns(min(len(uploaded_files), 3))
        for idx, file in enumerate(uploaded_files[:3]):
            with cols[idx]:
                try:
                    image = Image.open(file)
                    st.image(image, caption=file.name, use_column_width=True)
                except:
                    st.write(f"üìÑ {file.name}")
        
        if len(uploaded_files) > 3:
            st.write(f"... v√† {len(uploaded_files) - 3} file kh√°c")
        
        # Upload button
        if st.button("üöÄ X·ª≠ L√Ω H√≥a ƒê∆°n", type="primary"):
            with st.spinner("ƒêang t·∫£i l√™n v√† x·ª≠ l√Ω..."):
                try:
                    result = upload_receipt(uploaded_files)
                    
                    if "job_ids" in result:
                        st.success(f"‚úÖ ƒê√£ t·∫°o {len(result['job_ids'])} t√°c v·ª• x·ª≠ l√Ω")
                        
                        # Track job progress
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        job_ids = result["job_ids"]
                        completed = 0
                        total = len(job_ids)
                        
                        while completed < total:
                            completed = 0
                            for job_id in job_ids:
                                job_status = get_job_status(job_id)
                                if job_status["status"] in ["completed", "failed"]:
                                    completed += 1
                            
                            progress = completed / total
                            progress_bar.progress(progress)
                            status_text.text(f"Ho√†n th√†nh: {completed}/{total}")
                            
                            if completed < total:
                                time.sleep(2)
                        
                        st.success("üéâ Ho√†n th√†nh x·ª≠ l√Ω!")
                        st.balloons()
                        
                        # Show results
                        st.subheader("K·∫øt qu·∫£")
                        for job_id in job_ids:
                            job_status = get_job_status(job_id)
                            with st.expander(f"Job: {job_id[:8]}..."):
                                st.json(job_status)
                    else:
                        st.error("L·ªói khi t·∫£i l√™n")
                        
                except Exception as e:
                    st.error(f"‚ùå L·ªói: {str(e)}")


def page_view_receipts():
    """Page 2: View and manage receipts"""
    st.title("üìã Xem H√≥a ƒê∆°n")
    
    # Filters
    col1, col2, col3 = st.columns(3)
    
    with col1:
        date_filter = st.date_input(
            "T·ª´ ng√†y",
            value=datetime.now() - timedelta(days=30)
        )
    
    with col2:
        category_filter = st.selectbox(
            "Danh m·ª•c",
            ["T·∫•t c·∫£", "Th·ª±c Ph·∫©m", "ƒêi·ªán T·ª≠", "Qu·∫ßn √Åo", "Y T·∫ø", 
             "Gi·∫£i Tr√≠", "Du L·ªãch", "Gia D·ª•ng", "Kh√°c"]
        )
    
    with col3:
        search = st.text_input("T√¨m ki·∫øm", placeholder="T√™n c·ª≠a h√†ng...")
    
    # Fetch receipts
    try:
        receipts = get_receipts(limit=100)
        
        if not receipts:
            st.info("Ch∆∞a c√≥ h√≥a ƒë∆°n n√†o. H√£y qu√©t h√≥a ƒë∆°n ƒë·∫ßu ti√™n!")
            return
        
        # Filter receipts
        df = pd.DataFrame(receipts)
        
        if category_filter != "T·∫•t c·∫£":
            df = df[df["category"] == category_filter]
        
        if search:
            df = df[df["merchant_name"].str.contains(search, case=False, na=False)]
        
        # Display count
        st.write(f"**T√¨m th·∫•y {len(df)} h√≥a ƒë∆°n**")
        
        # Display receipts in grid
        for idx, receipt in df.iterrows():
            with st.expander(
                f"üßæ {receipt.get('merchant_name', 'Unknown')} - "
                f"{receipt.get('total_amount', 0):,.0f} VNƒê - "
                f"{receipt.get('receipt_date', 'N/A')}"
            ):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.write(f"**M√£ h√≥a ƒë∆°n:** {receipt['id']}")
                    st.write(f"**Ng√†y:** {receipt.get('receipt_date', 'N/A')}")
                    st.write(f"**C·ª≠a h√†ng:** {receipt.get('merchant_name', 'Unknown')}")
                    st.write(f"**T·ªïng ti·ªÅn:** {receipt.get('total_amount', 0):,.0f} VNƒê")
                    st.write(f"**Danh m·ª•c:** {receipt.get('category', 'Kh√°c')}")
                    st.write(f"**ƒê·ªô tin c·∫≠y:** {receipt.get('confidence', 0):.2%}")
                    
                    if receipt.get("items"):
                        st.write("**S·∫£n ph·∫©m:**")
                        for item in receipt["items"]:
                            st.write(f"- {item}")
                
                with col2:
                    # Action buttons
                    if st.button("‚úèÔ∏è S·ª≠a", key=f"edit_{receipt['id']}"):
                        st.session_state[f"editing_{receipt['id']}"] = True
                    
                    if st.button("üóëÔ∏è X√≥a", key=f"delete_{receipt['id']}"):
                        if delete_receipt(receipt['id']):
                            st.success("ƒê√£ x√≥a!")
                            st.rerun()
                        else:
                            st.error("L·ªói khi x√≥a")
                
                # Edit mode
                if st.session_state.get(f"editing_{receipt['id']}", False):
                    st.write("---")
                    st.write("**Ch·ªânh s·ª≠a th√¥ng tin**")
                    
                    new_merchant = st.text_input("C·ª≠a h√†ng", value=receipt.get("merchant_name", ""))
                    new_amount = st.number_input("T·ªïng ti·ªÅn", value=float(receipt.get("total_amount", 0)))
                    new_category = st.selectbox(
                        "Danh m·ª•c",
                        ["Th·ª±c Ph·∫©m", "ƒêi·ªán T·ª≠", "Qu·∫ßn √Åo", "Y T·∫ø", "Gi·∫£i Tr√≠", "Du L·ªãch", "Gia D·ª•ng", "Kh√°c"],
                        index=["Th·ª±c Ph·∫©m", "ƒêi·ªán T·ª≠", "Qu·∫ßn √Åo", "Y T·∫ø", "Gi·∫£i Tr√≠", "Du L·ªãch", "Gia D·ª•ng", "Kh√°c"].index(receipt.get("category", "Kh√°c"))
                    )
                    
                    if st.button("üíæ L∆∞u", key=f"save_{receipt['id']}"):
                        updated_data = {
                            "merchant_name": new_merchant,
                            "total_amount": new_amount,
                            "category": new_category
                        }
                        update_receipt(receipt['id'], updated_data)
                        st.success("ƒê√£ c·∫≠p nh·∫≠t!")
                        st.session_state[f"editing_{receipt['id']}"] = False
                        st.rerun()
        
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")


def page_analytics():
    """Page 3: Analytics and insights"""
    st.title("üìä Ph√¢n T√≠ch Chi Ti√™u")
    
    try:
        receipts = get_receipts(limit=1000)
        
        if not receipts:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch")
            return
        
        df = pd.DataFrame(receipts)
        df['total_amount'] = pd.to_numeric(df['total_amount'], errors='coerce')
        df['receipt_date'] = pd.to_datetime(df['receipt_date'], errors='coerce')
        
        # Summary metrics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_spent = df['total_amount'].sum()
            st.metric("T·ªïng Chi Ti√™u", f"{total_spent:,.0f} VNƒê")
        
        with col2:
            avg_receipt = df['total_amount'].mean()
            st.metric("Trung B√¨nh/H√≥a ƒê∆°n", f"{avg_receipt:,.0f} VNƒê")
        
        with col3:
            total_receipts = len(df)
            st.metric("T·ªïng S·ªë H√≥a ƒê∆°n", f"{total_receipts}")
        
        with col4:
            this_month = df[df['receipt_date'].dt.month == datetime.now().month]['total_amount'].sum()
            st.metric("Chi Th√°ng N√†y", f"{this_month:,.0f} VNƒê")
        
        st.write("---")
        
        # Category breakdown
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Chi Ti√™u Theo Danh M·ª•c")
            category_spend = df.groupby('category')['total_amount'].sum().sort_values(ascending=False)
            
            fig = px.pie(
                values=category_spend.values,
                names=category_spend.index,
                title="Ph√¢n B·ªï Chi Ti√™u"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("Top 10 C·ª≠a H√†ng")
            merchant_spend = df.groupby('merchant_name')['total_amount'].sum().sort_values(ascending=False).head(10)
            
            fig = px.bar(
                x=merchant_spend.values,
                y=merchant_spend.index,
                orientation='h',
                title="Chi Ti√™u Theo C·ª≠a H√†ng"
            )
            fig.update_layout(yaxis={'categoryorder': 'total ascending'})
            st.plotly_chart(fig, use_container_width=True)
        
        # Time series
        st.subheader("Xu H∆∞·ªõng Chi Ti√™u Theo Th·ªùi Gian")
        
        df_sorted = df.sort_values('receipt_date')
        daily_spend = df_sorted.groupby(df_sorted['receipt_date'].dt.date)['total_amount'].sum()
        
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=daily_spend.index,
            y=daily_spend.values,
            mode='lines+markers',
            name='Chi ti√™u h√†ng ng√†y'
        ))
        fig.update_layout(
            xaxis_title="Ng√†y",
            yaxis_title="S·ªë ti·ªÅn (VNƒê)",
            hovermode='x unified'
        )
        st.plotly_chart(fig, use_container_width=True)
        
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")


def page_settings():
    """Page 4: Settings and admin"""
    st.title("‚öôÔ∏è C√†i ƒê·∫∑t")
    
    tab1, tab2, tab3 = st.tabs(["H·ªá Th·ªëng", "M√¥ H√¨nh ML", "Th√¥ng Tin"])
    
    with tab1:
        st.subheader("C√†i ƒê·∫∑t H·ªá Th·ªëng")
        
        st.write("**Tr·∫°ng th√°i API**")
        if check_api_health():
            st.success("‚úÖ API ƒëang ho·∫°t ƒë·ªông")
        else:
            st.error("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c API")
        
        st.write("**C∆° s·ªü d·ªØ li·ªáu**")
        try:
            receipts = get_receipts(limit=1)
            st.info(f"K·∫øt n·ªëi th√†nh c√¥ng")
        except:
            st.error("L·ªói k·∫øt n·ªëi database")
    
    with tab2:
        st.subheader("Qu·∫£n L√Ω M√¥ H√¨nh ML")
        
        st.write("**Hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh**")
        st.write("S·ª≠ d·ª•ng d·ªØ li·ªáu ph·∫£n h·ªìi ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c ph√¢n lo·∫°i")
        
        if st.button("üîÑ Retrain Model", type="primary"):
            with st.spinner("ƒêang hu·∫•n luy·ªán..."):
                try:
                    response = requests.post(f"{API_URL}/admin/retrain")
                    if response.status_code == 200:
                        result = response.json()
                        st.success(f"‚úÖ Ho√†n th√†nh! Job ID: {result.get('job_id')}")
                    else:
                        st.error("L·ªói khi retrain")
                except Exception as e:
                    st.error(f"L·ªói: {str(e)}")
    
    with tab3:
        st.subheader("Th√¥ng Tin ·ª®ng D·ª•ng")
        st.write("**Receipt Scanner v1.0**")
        st.write("H·ªá th·ªëng qu√©t v√† ph√¢n lo·∫°i h√≥a ƒë∆°n t·ª± ƒë·ªông")
        st.write("")
        st.write("**C√¥ng ngh·ªá:**")
        st.write("- OCR: Tesseract")
        st.write("- ML: Sentence-BERT + Logistic Regression")
        st.write("- Backend: FastAPI + Celery")
        st.write("- Frontend: Streamlit")
        st.write("- Storage: MinIO/S3")


# Main app
def main():
    # Sidebar navigation
    st.sidebar.title("üßæ Receipt Scanner")
    
    pages = {
        "üì∏ Qu√©t H√≥a ƒê∆°n": page_scan_receipts,
        "üìã Xem H√≥a ƒê∆°n": page_view_receipts,
        "üìä Ph√¢n T√≠ch": page_analytics,
        "‚öôÔ∏è C√†i ƒê·∫∑t": page_settings
    }
    
    selection = st.sidebar.radio("Ch·ªçn trang", list(pages.keys()))
    
    # Display selected page
    pages[selection]()
    
    # Footer
    st.sidebar.markdown("---")
    st.sidebar.markdown("Made with ‚ù§Ô∏è using Streamlit")


if __name__ == "__main__":
    main()